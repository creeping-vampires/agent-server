import { extractActionStateJson, saveAgentStateToFile } from "./agent";

// Sample message with Action State JSON
const sampleMessage = `Action State: {"hlp":{"plan_id":"5298fd3e-3fa8-4fca-bb7b-070d1bf8dd56","observation_reflection":"Successfully retrieved initial arbitrage data showing a 0.0153% spread (14.495 USD difference). The result explicitly flagged fee/risk evaluation as critical path items. My programming requires me to process this preliminary output before any execution decisions.","plan":["Analyze spreads and calculate net profit after fees","Determine executable opportunities with sufficient margin","Execute highest-yield arbitrage trade"],"plan_reasoning":"Current plan sequence remains valid. Analyzing spreads & fee impact is the mandatory next step - profitability can't be confirmed without precise cost modeling. Following analysis, viability checks must determine if remaining margins meet my predefined thresholds for action. Only then can trade execution be prioritized.","change_indicator":"next_step","log":[{"reflection":"I need to find arbitrage opportunities for BTC/USD, but I haven't started any actions yet. Since the Activity Recommender location is explicitly designed to show arbitrage opportunities, that's clearly the logical starting point. No previous attempts exist to analyze or learn from.","task_reasoning":"All subsequent analysis depends on first obtaining the raw arbitrage data from the designated system. The Activity Recommender's sole function is to surface these opportunities, making it the mandatory initial step. Without querying this source, I have no basis to proceed. This is a direct, specific action required by my programmed objective.","task":"Access the Activity Recommender interface to obtain real-time list of BTC/USD price disparities across tracked exchanges, including bid-ask spreads and platform fee data","result":"Found 0.0153% BTC/USD arbitrage spread (14.495 USD difference). Opportunity requires fee/risk evaluation before execution."}],"current_state_of_execution":""},"current_task":{"task_id":"6b1d1c97-5c61-4ab3-99c6-b1d99142fa0e","task":"Calculate net arbitrage profit by subtracting exchange fees (trading/withdrawal) from gross spread amount, while cross-referencing real-time order book depth from source exchanges to validate executable volume","location_id":"activity_recommender","task_reasoning":"The identified 0.0153% spread is potentially negated when transaction fees are applied. I must calculate bid/ask prices across both exchanges minus maker/taker fees, withdrawal costs, and network fees. Simultaneously verify order book depth to ensure executable volume within the spread window. Without this computational step, I can't progress to judging opportunity viability.","llp":{"plan_id":"b4abe095-fbca-4e85-bcd7-1a44b1ad6ab0","plan_reasoning":"First, I need to execute the 'arbitrage' function to check the gross spread between CoinGecko and Pyth Oracle. Once I get the spread value, I must validate if the current order book depth supports executing the arbitrage volume. However, the available action space lacks direct functions to retrieve fee structures or validate order book depth. This suggests I must infer data from the 'arbitrage' function's output. If the function returns both spread and executable volume (and fees are pre-known), I can calculate net profit manually. If it only provides spread, the task cannot proceed as required parameters are missing. Proceeding cautiously to avoid deadlock.","situation_analysis":"","plan":["Run 'arbitrage' to get price spread","Assume exchange fees (if not provided)","Calculate net profit after fees","Validate against order book depth (if data available)","Decide to end based on actionable results"],"reflection":"No execution steps yet; need to initiate arbitrage check.","change_indicator":"next_step"},"task_result":null},"recent_reasoning":[{"id":"Task_1","plan_reflection":"I need to find arbitrage opportunities for BTC/USD, but I haven't started any actions yet. Since the Activity Recommender location is explicitly designed to show arbitrage opportunities, that's clearly the logical starting point. No previous attempts exist to analyze or learn from.","plan_reasoning":"My core purpose is identifying price discrepancies between markets. The Activity Recommender directly provides the data I require, so this must be my first actionable step. Without retrieving the raw opportunity data, I cannot proceed to analyze or act on it. The plan must begin with data acquisition.","next_task_reasoning":"All subsequent analysis depends on first obtaining the raw arbitrage data from the designated system. The Activity Recommender's sole function is to surface these opportunities, making it the mandatory initial step. Without querying this source, I have no basis to proceed. This is a direct, specific action required by my programmed objective.","task":"Access the Activity Recommender interface to obtain real-time list of BTC/USD price disparities across tracked exchanges, including bid-ask spreads and platform fee data","worker_id":"activity_recommender","actions":[{"id":"Step_0","task_reflection":"No prior steps taken; initiating first action.","task_reasoning":"The task requires accessing real-time BTC/USD price disparities via the Activity Recommender interface. The only relevant action available is the 'arbitrage' function, which checks disparities between CoinGecko and Pyth Oracle. Since this is the first step and the function directly fulfills the task's goal, executing it will retrieve the necessary data. If the function returns valid data (e.g., price spreads and fees), the task is complete. If it fails, there are no alternative actions to retry, so ending the task would be appropriate. Given the action space constraints, this is the logical first and only required step.","next_step_reasoning":"The 'arbitrage' function is the only actionable way to retrieve the required data. Executing it fulfills the task's core objective.","fn_name":"arbitrage"}]},{"id":"Task_2","plan_reflection":"Successfully retrieved initial arbitrage data showing a 0.0153% spread (14.495 USD difference). The result explicitly flagged fee/risk evaluation as critical path items. My programming requires me to process this preliminary output before any execution decisions.","plan_reasoning":"Current plan sequence remains valid. Analyzing spreads & fee impact is the mandatory next step - profitability can't be confirmed without precise cost modeling. Following analysis, viability checks must determine if remaining margins meet my predefined thresholds for action. Only then can trade execution be prioritized.","next_task_reasoning":"The identified 0.0153% spread is potentially negated when transaction fees are applied. I must calculate bid/ask prices across both exchanges minus maker/taker fees, withdrawal costs, and network fees. Simultaneously verify order book depth to ensure executable volume within the spread window. Without this computational step, I can't progress to judging opportunity viability.","task":"Calculate net arbitrage profit by subtracting exchange fees (trading/withdrawal) from gross spread amount, while cross-referencing real-time order book depth from source exchanges to validate executable volume","worker_id":"activity_recommender","actions":[{"id":"Step_0","task_reflection":"No execution steps yet; need to initiate arbitrage check.","task_reasoning":"First, I need to execute the 'arbitrage' function to check the gross spread between CoinGecko and Pyth Oracle. Once I get the spread value, I must validate if the current order book depth supports executing the arbitrage volume. However, the available action space lacks direct functions to retrieve fee structures or validate order book depth. This suggests I must infer data from the 'arbitrage' function's output. If the function returns both spread and executable volume (and fees are pre-known), I can calculate net profit manually. If it only provides spread, the task cannot proceed as required parameters are missing. Proceeding cautiously to avoid deadlock.","next_step_reasoning":"Must start with the 'arbitrage' function to gather baseline data about the price spread. Without this, no progress is possible.","fn_name":"arbitrage"}]}]}.`;
// Test the extraction function
const extractedJson = extractActionStateJson(sampleMessage);
console.log("Extracted JSON:", extractedJson ? "Success" : "Failed");

console.log({ extractedJson });
if (extractedJson) {
  // Test saving to file
  saveAgentStateToFile(extractedJson);
  console.log("Test complete");
}
